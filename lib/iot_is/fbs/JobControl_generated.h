// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_JOBCONTROL_JOBFLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_JOBCONTROL_JOBFLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace JobFlatBuffers {

struct JobControl;
struct JobControlBuilder;
struct JobControlT;

enum JobControlEnum : int8_t {
  JobControlEnum_JOB_PAUSE = 0,
  JobControlEnum_JOB_RESUME = 1,
  JobControlEnum_JOB_SKIP_STEP = 2,
  JobControlEnum_JOB_SKIP_CYCLE = 3,
  JobControlEnum_JOB_CANCEL = 4,
  JobControlEnum_MIN = JobControlEnum_JOB_PAUSE,
  JobControlEnum_MAX = JobControlEnum_JOB_CANCEL
};

inline const JobControlEnum (&EnumValuesJobControlEnum())[5] {
  static const JobControlEnum values[] = {
    JobControlEnum_JOB_PAUSE,
    JobControlEnum_JOB_RESUME,
    JobControlEnum_JOB_SKIP_STEP,
    JobControlEnum_JOB_SKIP_CYCLE,
    JobControlEnum_JOB_CANCEL
  };
  return values;
}

inline const char * const *EnumNamesJobControlEnum() {
  static const char * const names[6] = {
    "JOB_PAUSE",
    "JOB_RESUME",
    "JOB_SKIP_STEP",
    "JOB_SKIP_CYCLE",
    "JOB_CANCEL",
    nullptr
  };
  return names;
}

inline const char *EnumNameJobControlEnum(JobControlEnum e) {
  if (::flatbuffers::IsOutRange(e, JobControlEnum_JOB_PAUSE, JobControlEnum_JOB_CANCEL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesJobControlEnum()[index];
}

struct JobControlT : public ::flatbuffers::NativeTable {
  typedef JobControl TableType;
  std::string job_id{};
  JobFlatBuffers::JobControlEnum control = JobFlatBuffers::JobControlEnum_JOB_PAUSE;
};

struct JobControl FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef JobControlT NativeTableType;
  typedef JobControlBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_JOB_ID = 4,
    VT_CONTROL = 6
  };
  const ::flatbuffers::String *job_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JOB_ID);
  }
  JobFlatBuffers::JobControlEnum control() const {
    return static_cast<JobFlatBuffers::JobControlEnum>(GetField<int8_t>(VT_CONTROL, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_JOB_ID) &&
           verifier.VerifyString(job_id()) &&
           VerifyField<int8_t>(verifier, VT_CONTROL, 1) &&
           verifier.EndTable();
  }
  JobControlT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(JobControlT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<JobControl> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const JobControlT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct JobControlBuilder {
  typedef JobControl Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_job_id(::flatbuffers::Offset<::flatbuffers::String> job_id) {
    fbb_.AddOffset(JobControl::VT_JOB_ID, job_id);
  }
  void add_control(JobFlatBuffers::JobControlEnum control) {
    fbb_.AddElement<int8_t>(JobControl::VT_CONTROL, static_cast<int8_t>(control), 0);
  }
  explicit JobControlBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<JobControl> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<JobControl>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<JobControl> CreateJobControl(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> job_id = 0,
    JobFlatBuffers::JobControlEnum control = JobFlatBuffers::JobControlEnum_JOB_PAUSE) {
  JobControlBuilder builder_(_fbb);
  builder_.add_job_id(job_id);
  builder_.add_control(control);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<JobControl> CreateJobControlDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *job_id = nullptr,
    JobFlatBuffers::JobControlEnum control = JobFlatBuffers::JobControlEnum_JOB_PAUSE) {
  auto job_id__ = job_id ? _fbb.CreateString(job_id) : 0;
  return JobFlatBuffers::CreateJobControl(
      _fbb,
      job_id__,
      control);
}

::flatbuffers::Offset<JobControl> CreateJobControl(::flatbuffers::FlatBufferBuilder &_fbb, const JobControlT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline JobControlT *JobControl::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<JobControlT>(new JobControlT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void JobControl::UnPackTo(JobControlT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = job_id(); if (_e) _o->job_id = _e->str(); }
  { auto _e = control(); _o->control = _e; }
}

inline ::flatbuffers::Offset<JobControl> JobControl::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const JobControlT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateJobControl(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<JobControl> CreateJobControl(::flatbuffers::FlatBufferBuilder &_fbb, const JobControlT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const JobControlT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _job_id = _o->job_id.empty() ? 0 : _fbb.CreateString(_o->job_id);
  auto _control = _o->control;
  return JobFlatBuffers::CreateJobControl(
      _fbb,
      _job_id,
      _control);
}

inline const JobFlatBuffers::JobControl *GetJobControl(const void *buf) {
  return ::flatbuffers::GetRoot<JobFlatBuffers::JobControl>(buf);
}

inline const JobFlatBuffers::JobControl *GetSizePrefixedJobControl(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<JobFlatBuffers::JobControl>(buf);
}

inline bool VerifyJobControlBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<JobFlatBuffers::JobControl>(nullptr);
}

inline bool VerifySizePrefixedJobControlBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<JobFlatBuffers::JobControl>(nullptr);
}

inline void FinishJobControlBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<JobFlatBuffers::JobControl> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedJobControlBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<JobFlatBuffers::JobControl> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<JobFlatBuffers::JobControlT> UnPackJobControl(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<JobFlatBuffers::JobControlT>(GetJobControl(buf)->UnPack(res));
}

inline std::unique_ptr<JobFlatBuffers::JobControlT> UnPackSizePrefixedJobControl(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<JobFlatBuffers::JobControlT>(GetSizePrefixedJobControl(buf)->UnPack(res));
}

}  // namespace JobFlatBuffers

#endif  // FLATBUFFERS_GENERATED_JOBCONTROL_JOBFLATBUFFERS_H_
